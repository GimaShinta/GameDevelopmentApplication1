#include "Harpy.h"
#include "../../Utility/InputControl.h"
#include "DxLib.h"

//型変換用
#include "../Bomb/Bomb.h"

Harpy::Harpy() :animation_count(0)
{
	//初期化
	animation[0] = NULL;
	animation[1] = NULL;

	for (int i = 0; i < 4; i++)
	{
		number[i] = NULL;
	}
}

Harpy::~Harpy()
{
}

//初期化処理
void Harpy::Initialize()
{
	//画像の読み込み
	animation[0] = LoadGraph("Resource/Images/Harpy/1.png");
	animation[1] = LoadGraph("Resource/Images/Harpy/2.png");

	number[0] = LoadGraph("Resource/Images/FlyText/-.png");
	number[1] = LoadGraph("Resource/Images/Score/1.png");
	number[2] = LoadGraph("Resource/Images/Score/0.png");
	number[3] = LoadGraph("Resource/Images/Score/0.png");

	//エラーチェック
	if (animation[0] == -1 || animation[1] == -1)
	{
		throw("ハーピーの画像がありません\n");
	}

	for (int i = 0; i < 4; i++)
	{
		if (animation[i] == -1 )
		{
			throw("数字の画像がありません\n");
		}
	}

	//向きの設定
	radian = 0.0f;

	//大きさの設定
	box_size = (64.0f / 5) * 3;

	//初期画像の設定
	image = animation[0];

	//初期進行方向の設定
	direction = Vector2D(0, 0);
}

//更新処理
void Harpy::Update()
{
	//移動処理
	Movement();

	//アニメーション制御
	AnimationControl();


	//消えるときのアニメーションを行う
	if (animation_flag == TRUE)
	{
		//透明度を上げる
		transparent += gradually;

		//カウント加算
		anim_count++;
		if (anim_count >= 5)
		{
			//anim_countが15になったら1ずつ加算
			reach_count += 1;
			//偶数であれば
			if (reach_count % 2 == 0)
			{
				location.x += -5;
			}
			//奇数であれば
			else
			{
				location.x += 5;
			}
			//カウントリセット
			anim_count = 0;
		}
		//完全に透明になったら削除
		if (transparent <= 0)
		{
			//削除フラグ
			delete_flag = TRUE;
		}
	}
}

//描画処理
void Harpy::Draw() const
{
	//情報を基にハーピー画像を描画する
	//anim_aで透明度を上げる
	SetDrawBlendMode(DX_BLENDMODE_ALPHA, transparent);
	DrawRotaGraphF(location.x, location.y, image_size, radian, image, TRUE, flip_flag);
	//獲得スコアの表示
	if (transparent < 255)
	{
		DrawRotaGraphF(location.x + 45, location.y - 30, number_size, radian, number[0], TRUE, FALSE);
		DrawRotaGraphF(location.x + 55, location.y - 30, number_size, radian, number[1], TRUE, FALSE);
		DrawRotaGraphF(location.x + 65, location.y - 30, number_size, radian, number[2], TRUE, FALSE);
		DrawRotaGraphF(location.x + 75, location.y - 30, number_size, radian, number[3], TRUE, FALSE);
	}
	SetDrawBlendMode(DX_BLENDMODE_NOBLEND, 0);

	//親クラスの描画処理を呼び出す
	__super::Draw();
}

//終了時処理
void Harpy::Finalize()
{
	//使用した画像を解放する
	DeleteGraph(animation[0]);
	DeleteGraph(animation[1]);

	for (int i = 0; i < 4; i++)
	{
		DeleteGraph(number[i]);
	}
}

//当たり判定通知処理
void Harpy::OnHitCollision(GameObject* hit_object)
{
	//当たった時の処理
	//ヒット時処理
	if (dynamic_cast<Bomb*>(hit_object) != nullptr)
	{
		//消える
		animation_flag = TRUE;

		//スコア
		score = -100;
	}
}

//移動処理
void Harpy::Movement()
{
	//左から出現
	if (flip_flag == FALSE)
	{
		direction.x = 1;
	}
	//右から出現
	else
	{
		direction.x = -1;
	}

	//消えるとき動きを止める
	if (animation_flag == TRUE)
	{
		direction = 0;
	}

	//画面外で削除
	if (location.x < 0 || location.x>640)
	{
		//削除フラグ
		delete_flag = TRUE;
	}

	//進行方向に向かって、位置座標を変更する
	location += direction;
}

//アニメーション制御
void Harpy::AnimationControl()
{
	//フレームカウントを加算する
	animation_count++;
	//60フレーム目に到達したら
	if (animation_count >= 60)
	{
		//カウントのリセット
		animation_count = 0;

		//画像の切り替え
		if (image == animation[0])
		{
			image = animation[1];
		}
		else
		{
			image = animation[0];
		}
	}
}
